[{"path":"index.html","id":"welcome","chapter":"1 Welcome!","heading":"1 Welcome!","text":" Open Science becoming increasingly popular relevant, world opportunity opening make work fully reproducible. without challenges: best practices reproducible science include number tools may never used even heard : using version control? managing dependencies? writing manuscript executable document?like get started open reproducible workflow, without dealing mountain new tools platforms, introduce WORCS, Workflow Open Reproducible Code Science. workflow written R, need prior programming experience join workshop. motivation step comfort zone — new one — important prerequisite.WORCS R package takes data published paper single streamlined workflow, making entire process analysis, submission manuscript, reproducible. WORCS workflow optionally facilitates pre-registration, sharing code data (safely!), submission pre-print.workshop give overview workflow introduce use. create first reproducible project going steps workflow .","code":""},{"path":"installation-troubleshooting.html","id":"installation-troubleshooting","chapter":"2 Installation & Troubleshooting","heading":"2 Installation & Troubleshooting","text":"","code":""},{"path":"installation-troubleshooting.html","id":"setup","chapter":"2 Installation & Troubleshooting","heading":"2.1 Setup","text":"tutorial set personal computer use worcs package. guides installation several software packages, registration GitHub. vignette assume prior installation R, suitable novice users. perform steps every computer intend use R worcs , entire process take approximately 30 minutes start scratch. case software already installed system, can skip related steps.Follow steps order:Install R https://CRAN.R-project.orgInstall ‘RStudio’ Desktop (Free) rstudio.comInstall Git git-scm.com. Use default, recommended settings. especially important leave settings selected:\nGit command line also third party software\nUse ‘OpenSSL’ library\nCheckout Windows-style, commit Unix-style line endings\nEnable Git Credential Manager\nrun trouble, comprehensive tutorial installing Git available happygitwithr.com.\nGit command line also third party softwareUse ‘OpenSSL’ libraryCheckout Windows-style, commit Unix-style line endingsEnable Git Credential ManagerIf run trouble, comprehensive tutorial installing Git available happygitwithr.com.Register ‘GitHub’ (alternatively: see vignette use ‘GitLab’ ‘Bitbucket’)\nGo github.com click Sign . Choose “Individual”, “Free” plan. \nGo github.com click Sign . Choose “Individual”, “Free” plan. Connect ‘RStudio’ Git GitHub (support, see ‘RStudio’ article, blog post)\nOpen ‘RStudio’, open Tools menu, click Global Options, click Git/SVN\nVerify Enable version control interface RStudio projects selected\nVerify Git executable: shows location git.exe. missing, manually fix location file.\nClick Create RSA Key. enter passphrase. Press Create. window information open, can close.\nClick View public key, copy entire text clipboard.\nClose ‘RStudio’ (might offer restart ; fine)\nGo github.com\nClick user icon, click Settings, select SSH GPG keys tab.\nClick New SSH key. Give arbitrary name (e.g., computer ID), paste public key clipboard box labeled Key.\nOpen ‘RStudio’ (unless restarted )\nOpen ‘RStudio’, open Tools menu, click Global Options, click Git/SVNVerify Enable version control interface RStudio projects selectedVerify Git executable: shows location git.exe. missing, manually fix location file.Click Create RSA Key. enter passphrase. Press Create. window information open, can close.Click View public key, copy entire text clipboard.Close ‘RStudio’ (might offer restart ; fine)Go github.comClick user icon, click Settings, select SSH GPG keys tab.Click New SSH key. Give arbitrary name (e.g., computer ID), paste public key clipboard box labeled Key.Open ‘RStudio’ (unless restarted )Install packages required WORCS running following code ‘RStudio’ console. prepared three contingencies:\nreceive error saying package called [package name], run code install.packages(\"package name\")\nprompted update packages, just press [ENTER] avoid updating packages. Updating packages way interactive session sometimes leads errors packages loaded.\nsee pop-dialog asking want install sources package needs compilation?, click .\nreceive error saying package called [package name], run code install.packages(\"package name\")prompted update packages, just press [ENTER] avoid updating packages. Updating packages way interactive session sometimes leads errors packages loaded.see pop-dialog asking want install sources package needs compilation?, click .Git user set computer yet (e.g., first time using Git), run following - making sure substitute actual username email:intend write documents APA style, additionally install papaja package. Unfortunately, package yet available central R repository CRAN, can install ‘GitHub’ using following code:papaja many dependencies, recommended skip step intend write documents different style APA.’s ! Everything installed connected now.","code":"install.packages(\"worcs\", dependencies = TRUE)\ntinytex::install_tinytex()\nrenv::consent(provided = TRUE)worcs::git_user(\"your_name\", \"your_email\", overwrite = TRUE)remotes::install_github(\"crsh/papaja\", dependencies = TRUE, update = \"never\")"},{"path":"installation-troubleshooting.html","id":"test","chapter":"2 Installation & Troubleshooting","heading":"2.2 Test","text":"check installation setup successful, can try going ahead seeing whether can push pull GitHub without issue.something ’ll workshop well, trying beforehand allows us troubleshoot errors .sequence steps follows:Create test repository GitHub.Create test repository GitHub.Clone test repository.Clone test repository.Make local changes.Make local changes.Push local changes GitHub. magic happens ()!Push local changes GitHub. magic happens ()!went well, can refresh webpage GitHub repository ’ll see local changes.went well, can refresh webpage GitHub repository ’ll see local changes.Make changes online.Make changes online.Pull online changes computer, local repository date.Pull online changes computer, local repository date.went well, online changes available locally well. also means ’re fully set Git & GitHub!went well, online changes available locally well. also means ’re fully set Git & GitHub!","code":""},{"path":"installation-troubleshooting.html","id":"create-a-test-repository-on-github","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.1 Create a test repository on GitHub","text":"Log GitHub.Log GitHub.Click green New (repository) button.Click green New (repository) button.can name repository testrepo.can name repository testrepo.Make sure ’s Public repository.Make sure ’s Public repository.Click YES, asked want initialize repository README.Click YES, asked want initialize repository README.Click green Create repository button.Click green Create repository button.Copy SSH URL cloning via green Clone Download button.Copy SSH URL cloning via green Clone Download button.","code":""},{"path":"installation-troubleshooting.html","id":"clone-the-test-repository","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.2 Clone the test repository","text":"Go terminal type following command, substituting SSH clone URL copied previous step git clone:create local copy repository folder files contained within.","code":"git clone git@github.com:username/testrepo.git"},{"path":"installation-troubleshooting.html","id":"make-local-changes","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.3 Make local changes","text":"Navigate folder repository open README file. Make edit, line ’m adding offline local copy. Save file close .","code":""},{"path":"installation-troubleshooting.html","id":"push-the-local-changes-to-github","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.4 Push the local changes to GitHub","text":"Go terminal type following command(s):adds changed files ‘staging area’.Now ’re officially ‘committing’ changes made. want add understandable commit message clear record changes.command, push local changes commit message repository online.errors can pop SSH set-didn’t go smoothly expected. Troubleshoot error messages best can!everything went smoothly, can refresh webpage GitHub repository see changes synced.","code":"git add .git commit -m \"insert-understandable-message-here\"git push"},{"path":"installation-troubleshooting.html","id":"make-changes-online","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.5 Make changes online","text":"Now want go way around, open README file GitHub make edit online. can :Clicking README file pencil icon open edit mode.Clicking README file pencil icon open edit mode.Add sentence README like line ’m adding GitHub.com.Add sentence README like line ’m adding GitHub.com.saving, ’ll provide meaningful commit message .saving, ’ll provide meaningful commit message .","code":""},{"path":"installation-troubleshooting.html","id":"pull-from-github","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.6 Pull from GitHub","text":"Now go terminal type following command:goes well, ’ll see activity terminal suggests changes downloaded. can check README file see whether online change synced.","code":"git pull"},{"path":"installation-troubleshooting.html","id":"wrap-up","chapter":"2 Installation & Troubleshooting","heading":"2.2.0.7 Wrap-Up","text":"work? ! pushed pulled GitHub successfully, woohoo!","code":""},{"path":"intro.html","id":"intro","chapter":"3 Introduction to WORCS","heading":"3 Introduction to WORCS","text":"Workflow Open Reproducible Code Science (WORCS) easy adopt approach ensuring research project meets requirements Open Science start. based “good enough” philosophy, prioritizing user-friendliness exhaustiveness. can used either absence , parallel , existing requirements Open workflows. can also enhanced elaborate solutions specific issues.workflow illustrated :WORCS workflowDynamic document generationVersion controlDependency managementMoreover, helps adhere TOP guidelines FAIR principles. also accounts open closed data sharing options.following presentation dives concepts :Slides","code":""},{"path":"phase-1.html","id":"phase-1","chapter":"4 Phase 1: Study Design","heading":"4 Phase 1: Study Design","text":"Notes cautious researchersSome researchers might want share work paper accepted publication. case, recommend creating “Private” repository Step 1, completing Steps 13-18 Phase 3 upon acceptance journal.\nCreate new remote repository ‘Git’ hosting service, “GitHub”\ninexperienced users, recommend making repository “Private”, means selected co-authors can access . can set “Public” later - example, paper goes print - entire history Repository public record. recommend making repository “Public” start experienced user know .\nCopy repository’s SSH link clipboard; link look something like git@github.com:username/repository.git\nCreate new remote repository ‘Git’ hosting service, “GitHub”inexperienced users, recommend making repository “Private”, means selected co-authors can access . can set “Public” later - example, paper goes print - entire history Repository public record. recommend making repository “Public” start experienced user know .Copy repository’s SSH link clipboard; link look something like git@github.com:username/repository.git\nRstudio, click File > New Project > New directory > WORCS Project Template\nPaste remote Repository address textbox. address look like git@github.com:username/repository.git\nKeep checkbox renv checked want use dependency management (recommended)\nSelect preregistration template, add preregistration later using add_preregistration()\nSelect manuscript template, add manuscript later using add_manuscript()\nSelect license project (recommend CC-license, allows free use licensed material long creator credited)\nRstudio, click File > New Project > New directory > WORCS Project TemplatePaste remote Repository address textbox. address look like git@github.com:username/repository.gitKeep checkbox renv checked want use dependency management (recommended)Select preregistration template, add preregistration later using add_preregistration()Select manuscript template, add manuscript later using add_manuscript()Select license project (recommend CC-license, allows free use licensed material long creator credited)\ntemplate README.md file automatically generated project creation. Edit template explain users interact project. Based selections New Project dialog, LICENSE also added project, explain users’ rights limit liability. recommend CC-license, allows free use licensed material long creator credited.template README.md file automatically generated project creation. Edit template explain users interact project. Based selections New Project dialog, LICENSE also added project, explain users’ rights limit liability. recommend CC-license, allows free use licensed material long creator credited.\nworkshop, already round committing pushing local changes GitHub proceeding .\nClick “Git” tab upper right pane\nCheck ‘Staged’ box files\n’re already Git pop-window, click ‘Commit’\nType simple, meaningful message “Commit message” box initial commit WORCS project structure\nClick ‘Push’ button (green upwards arrow) upload changes GitHub. Note might prompted enter GitHub username password\nGo project repository GitHub refresh page, local changes now visible online. see files staged commit message provided noted history repository.\nworkshop, already round committing pushing local changes GitHub proceeding .Click “Git” tab upper right paneCheck ‘Staged’ box filesIf ’re already Git pop-window, click ‘Commit’Type simple, meaningful message “Commit message” box initial commit WORCS project structureClick ‘Push’ button (green upwards arrow) upload changes GitHub. Note might prompted enter GitHub username passwordGo project repository GitHub refresh page, local changes now visible online. see files staged commit message provided noted history repository.\nOptional: Preregister analysis committing plain-text preregistration tag commit label “preregistration”:\nDocument study plans preregistration.Rmd file, optionally, planned analyses .R file.\ntop-right panel ‘RStudio’, select ‘Git’ tab\nSelect checkbox next preregistration file(s)\nClick Commit button.\npop-window, write informative “Commit message”, e.g., “Preregistration”\nClick Commit button message dialog\nClick green arrow labeled “Push” send commit ‘Git’ remote repository\nTag commit release remote repository, using label “preregistration”. tagged release helps others retrieve commit.\nInstructions ‘GitHub’ explained \n\nOptional: Preregister analysis committing plain-text preregistration tag commit label “preregistration”:Document study plans preregistration.Rmd file, optionally, planned analyses .R file.top-right panel ‘RStudio’, select ‘Git’ tabSelect checkbox next preregistration file(s)Click Commit button.pop-window, write informative “Commit message”, e.g., “Preregistration”Click Commit button message dialogClick green arrow labeled “Push” send commit ‘Git’ remote repositoryTag commit release remote repository, using label “preregistration”. tagged release helps others retrieve commit.Instructions ‘GitHub’ explained \n\nOptional: Render preregistration PDF, upload attachment dedicated preregistration server like AsPredicted.org OSF.io\n‘RStudio’, file ‘preregistration.Rmd’ open, click “Knit” button top left panel\nPDF generated, go one recognized preregistration services’ websites, create new preregistration, upload attachment.\nOptional: Generate DOI preregistration OSF service like Zenodo\nOptional: Render preregistration PDF, upload attachment dedicated preregistration server like AsPredicted.org OSF.ioIn ‘RStudio’, file ‘preregistration.Rmd’ open, click “Knit” button top left panelWhen PDF generated, go one recognized preregistration services’ websites, create new preregistration, upload attachment.Optional: Generate DOI preregistration OSF service like Zenodo\nOptional: Add study materials repository.\nstudy materials rights, materials’ license allows \ncan solicit feedback outside contributions ‘Git’ remote repository opening “Issue” accepting “Pull requests”\nOptional: Add study materials repository.study materials rights, materials’ license allows itYou can solicit feedback outside contributions ‘Git’ remote repository opening “Issue” accepting “Pull requests”","code":""},{"path":"phase-2.html","id":"phase-2","chapter":"5 Phase 2: Writing & Analysis","heading":"5 Phase 2: Writing & Analysis","text":"\nCreate executable script documenting code required load raw data tabular format, de-identify human subjects applicable\nDocument preprocessing (“data wrangling”) procedure prepare_data.R file.\nfile intended document steps can replicated end users, unless access raw data file.\nsteps run , first time load data R.\nMake file short possible; include steps absolutely necessary\nDocument preprocessing (“data wrangling”) procedure prepare_data.R file.file intended document steps can replicated end users, unless access raw data file.steps run , first time load data R.Make file short possible; include steps absolutely necessary\nSave data using open_data() closed_data()\nWARNING: commit data file ‘Git’ repository, record retained forever (unless entire repository deleted). Assume pushing data ‘Git’ remote repository undone. Follow mantra: “Never commit something intend share”.\nusing external data sources (e.g., obtained using API), recommended store local copy, make project portable ensure end users access version data used.\nNOTE: open_data() closed_data() functions generate codebook possibly additional files part output, don’t worry new files added project.\nWARNING: commit data file ‘Git’ repository, record retained forever (unless entire repository deleted). Assume pushing data ‘Git’ remote repository undone. Follow mantra: “Never commit something intend share”.using external data sources (e.g., obtained using API), recommended store local copy, make project portable ensure end users access version data used.NOTE: open_data() closed_data() functions generate codebook possibly additional files part output, don’t worry new files added project.\nWrite manuscript Manuscript.Rmd\nUse code chunks perform analyses. first code chunk call load_data()\nFinish sentence one carriage return (enter); separate paragraphs double carriage return.\nUse code chunks perform analyses. first code chunk call load_data()Finish sentence one carriage return (enter); separate paragraphs double carriage return.\nRegularly Commit progress Git repository; ideally, completing small clearly defined task.\ntop-right panel ‘RStudio’, select ‘Git’ tab\nSelect checkboxes next files whose changes wish Commit\nClick Commit button.\npop-window, write informative “Commit message”.\nClick Commit button message dialog\nClick green arrow labeled “Push” send commit remote repository\ntop-right panel ‘RStudio’, select ‘Git’ tabSelect checkboxes next files whose changes wish CommitClick Commit button.pop-window, write informative “Commit message”.Click Commit button message dialogClick green arrow labeled “Push” send commit remote repository\nwriting, cite essential references one -symbol, [@essentialref2020], non-essential references double -symbol, [@@nonessential2020].writing RMarkdown format, use Markdown citekeys refer references, references stored separate text file known .bib file.ease process, recommend following procedure citation:writing, maintain plain-text .bib file BibTeX references\ncitations.\n+ can export .bib file reference manager\nprograms; free, open-source reference manager\nZotero excellent user-friendly,\nhighly interoperable commercial reference managers. tutorial using Zotero RMarkdown.\n+ Alternatively, possible make file hand, copy pasting\nnew reference \nprevious one; e.g., Figure ?? shows obtain \nBibTeX reference Google Scholar; simply copy-paste reference \n.bib fileDuring writing, maintain plain-text .bib file BibTeX references\ncitations.\n+ can export .bib file reference manager\nprograms; free, open-source reference manager\nZotero excellent user-friendly,\nhighly interoperable commercial reference managers. tutorial using Zotero RMarkdown.\n+ Alternatively, possible make file hand, copy pasting\nnew reference \nprevious one; e.g., Figure ?? shows obtain \nBibTeX reference Google Scholar; simply copy-paste reference \n.bib fileTo cite reference, use citekey - first word BibTeX entry\nreference. Insert RMarkdown file like : @yourcitekey2020.\nparenthesized reference, use [@citekeyone2020; @citekeytwo2020]. \noptions, see RMarkdown cookbook.cite reference, use citekey - first word BibTeX entry\nreference. Insert RMarkdown file like : @yourcitekey2020.\nparenthesized reference, use [@citekeyone2020; @citekeytwo2020]. \noptions, see RMarkdown cookbook.indicate non-essential citation, mark double -symbol: @@nonessential2020.indicate non-essential citation, mark double -symbol: @@nonessential2020.Knitting document, adapt knit command YAML header.knit: worcs::cite_all renders citations, andknit: worcs::cite_essential removes non-essential citations.Knitting document, adapt knit command YAML header.knit: worcs::cite_all renders citations, andknit: worcs::cite_essential removes non-essential citations.Optional: extremely thorough, make “branch” GitHub repository print version manuscript. branch, use function knit: worcs::cite_essential. procedure documented tutorial.Optional: extremely thorough, make “branch” GitHub repository print version manuscript. branch, use function knit: worcs::cite_essential. procedure documented tutorial.","code":""},{"path":"phase-3.html","id":"phase-3","chapter":"6 Phase 3: Submission & Publication","heading":"6 Phase 3: Submission & Publication","text":"\nUse dependency management make computational environment fully reproducible. using renv, can save state project library (packages used) calling renv::snapshot(). updates lockfile, renv.lock.Use dependency management make computational environment fully reproducible. using renv, can save state project library (packages used) calling renv::snapshot(). updates lockfile, renv.lock.\nOptional: Add WORCS-badge project’s README file complete optional elements WORCS checklist qualify “Perfect” rating. Run check_worcs() function see whether project adheres WORCS checklist (see worcs::checklist)\nadds WORCS-badge ‘README.md’ file, rank “Fail”, “Limited”, “Open”.\nReference WORCS checklist paper’s score paper.\nOptional: Complete additional optional items WORCS checklist hand, get “Perfect” rating.\nOptional: Add WORCS-badge project’s README file complete optional elements WORCS checklist qualify “Perfect” rating. Run check_worcs() function see whether project adheres WORCS checklist (see worcs::checklist)adds WORCS-badge ‘README.md’ file, rank “Fail”, “Limited”, “Open”.Reference WORCS checklist paper’s score paper.Optional: Complete additional optional items WORCS checklist hand, get “Perfect” rating.\nMake ‘Git’ remote repository “Public” set “Private”\nInstructions ‘GitHub’:\nGo project’s repository\nClick “Settings” button\nScroll bottom page; click “Make public”, follow -screen instructions\n\nMake ‘Git’ remote repository “Public” set “Private”Instructions ‘GitHub’:\nGo project’s repository\nClick “Settings” button\nScroll bottom page; click “Make public”, follow -screen instructions\nGo project’s repositoryClick “Settings” buttonScroll bottom page; click “Make public”, follow -screen instructions\nCreate project Open Science Framework (OSF) connect ‘Git’ remote repository.\nOSF project page, can select License project. helps clearly communicate terms reusability project. Make sure use License selected project creation Step 3.\nCreate project Open Science Framework (OSF) connect ‘Git’ remote repository.OSF project page, can select License project. helps clearly communicate terms reusability project. Make sure use License selected project creation Step 3.\nGenerate Digital Object Identifier (DOI) OSF project\nDOI persistent identifier can used link project page.\nmay already created project page Step 5 preregistered OSF\nOptionally, can generate additional DOIs specific resources like datasets.\nAlternatively, can connect ‘Git’ remote repository Zenodo, instead OSF, create DOIs project specific resources.\nGenerate Digital Object Identifier (DOI) OSF projectA DOI persistent identifier can used link project page.may already created project page Step 5 preregistered OSFOptionally, can generate additional DOIs specific resources like datasets.Alternatively, can connect ‘Git’ remote repository Zenodo, instead OSF, create DOIs project specific resources.\nAdd open science statement Abstract Author notes, links ‘OSF’ project page /‘Git’ remote repository.\nPlacing statement Abstract Author note means readers can find project even paper published behind paywall.\nlink can masked blind review.\nopen science statement indicate resources available online repository; data, code, materials, study design details, pre-registration, /comprehensive citations. guidance, see @aalbersbergMakingScienceTransparent2018. Example:spirit open science, online repository available XXX,\ncontains [data/synthetic data file], analysis code, research\nmaterials used, details study design, comprehensive citations,\ntagged release preregistration.\nAdd open science statement Abstract Author notes, links ‘OSF’ project page /‘Git’ remote repository.Placing statement Abstract Author note means readers can find project even paper published behind paywall.link can masked blind review.open science statement indicate resources available online repository; data, code, materials, study design details, pre-registration, /comprehensive citations. guidance, see @aalbersbergMakingScienceTransparent2018. Example:spirit open science, online repository available XXX,\ncontains [data/synthetic data file], analysis code, research\nmaterials used, details study design, comprehensive citations,\ntagged release preregistration.\nKnit paper PDF submission\n‘RStudio’, file ‘manuscript.Rmd’ open, click “Knit” button top left panel\nretain essential citations , change front matter ‘manuscript.Rmd’ file:\nChange knit: worcs::cite_all knit: worcs::cite_essential\nKnit paper PDF submissionIn ‘RStudio’, file ‘manuscript.Rmd’ open, click “Knit” button top left panelTo retain essential citations , change front matter ‘manuscript.Rmd’ file:\nChange knit: worcs::cite_all knit: worcs::cite_essential\nOptional: Publish preprint --profit preprint repository PsyArchiv, connect existing OSF project\nCheck Sherpa Romeo sure intended outlet allows publication preprints; many journals , nowadays - , worth considering outlets.\nOptional: Publish preprint --profit preprint repository PsyArchiv, connect existing OSF projectCheck Sherpa Romeo sure intended outlet allows publication preprints; many journals , nowadays - , worth considering outlets.\nSubmit paper, tag commit submitted paper release, Step 4.Submit paper, tag commit submitted paper release, Step 4.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
