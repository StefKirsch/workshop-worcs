[["index.html", "Writing A Reproducible Manuscript In R With WORCS Welcome!", " Writing A Reproducible Manuscript In R With WORCS Caspar van Lissa, Neha Moopen, Bianca Kramer 2022-06-16 Welcome! Open Science is becoming increasingly popular and relevant, and a world of opportunity is opening up to make your work fully reproducible. This is not without its challenges: best practices for reproducible science include a number of tools that you may never have used or even heard of before: Are you using version control? How are you managing your dependencies? Are you writing your manuscript as an executable document? For those who would like to get started with an open and reproducible workflow, without dealing with a mountain of new tools and platforms, we introduce WORCS, a Workflow for Open Reproducible Code in Science. The workflow is written for R, but you do not need to have prior programming experience to join this workshop. Having the motivation to step out of your comfort zone — and into a new one — is the most important prerequisite. WORCS is an R package that takes you from data to published paper in a single streamlined workflow, making the entire process of your analysis, up to the submission of your manuscript, reproducible. The WORCS workflow optionally facilitates pre-registration, sharing your code and your data (safely!), and the submission of a pre-print. This workshop will give you an overview of the workflow and introduce you to its use. You will create your first reproducible project by going through all steps of the workflow yourself. "],["installation-troubleshooting.html", "Installation &amp; Troubleshooting Setup Test!", " Installation &amp; Troubleshooting Setup This is a tutorial on how to set up your personal computer for use with the worcs package. It guides you through the installation of several software packages, and registration on GitHub. This vignette does not assume a prior installation of R, so it is suitable for novice users. You only have to perform these steps once for every computer you intend to use R and worcs on, and the entire process should take approximately 30 minutes if you start from scratch. In case some of the software is already installed on your system, you can skip those related steps. Follow these steps in order: Install R from https://CRAN.R-project.org Install ‘RStudio’ Desktop (Free) from rstudio.com Install Git from git-scm.com. Use the default, recommended settings. It is especially important to leave these settings selected: Git from the command line and also from third party software Use the ‘OpenSSL’ library Checkout Windows-style, commit Unix-style line endings Enable Git Credential Manager If you run into any trouble, a more comprehensive tutorial on installing Git is available at happygitwithr.com. Register on ‘GitHub’ (alternatively: see this vignette on how to use ‘GitLab’ or ‘Bitbucket’) Go to github.com and click Sign up. Choose an “Individual”, “Free” plan. Connect ‘RStudio’ to Git and GitHub (for more support, see this ‘RStudio’ article, and this blog post) Open ‘RStudio’, open the Tools menu, click Global Options, and click Git/SVN Verify that Enable version control interface for RStudio projects is selected Verify that Git executable: shows the location of git.exe. If it is missing, manually fix the location of the file. Click Create RSA Key. Do not enter a passphrase. Press Create. A window with some information will open, which you can close. Click View public key, and copy the entire text to the clipboard. Close ‘RStudio’ (it might offer to restart by itself; this is fine) Go to github.com Click your user icon, click Settings, and then select the SSH and GPG keys tab. Click New SSH key. Give it an arbitrary name (e.g., your computer ID), and paste the public key from your clipboard into the box labeled Key. Open ‘RStudio’ again (unless it restarted by itself) Install all packages required for WORCS by running the following code in the ‘RStudio’ console. Be prepared for three contingencies: If you receive any error saying There is no package called [package name], then run the code install.packages(\"package name\") If you are prompted to update packages, just press [ENTER] to avoid updating packages. Updating packages this way in an interactive session sometimes leads to errors if the packages are loaded. If you see a pop-up dialog asking Do you want to install from sources the package which needs compilation?, click No. install.packages(&quot;worcs&quot;, dependencies = TRUE) tinytex::install_tinytex() renv::consent(provided = TRUE) If you do not have a Git user set up on your computer yet (e.g., if this is the first time you will be using Git), run the following - making sure to substitute your actual username and email: worcs::git_user(&quot;your_name&quot;, &quot;your_email&quot;, overwrite = TRUE) If you intend to write documents in APA style, you should additionally install the papaja package. Unfortunately, this package is not yet available on the central R repository CRAN, but you can install it from ‘GitHub’ using the following code: remotes::install_github(&quot;crsh/papaja&quot;, dependencies = TRUE, update = &quot;never&quot;) Because papaja has many dependencies, it is recommended to skip this step if you intend to write documents in a different style than APA. That’s it! Everything should be installed and connected now. Test! If you’ve set up your SSH keys alright, we can try going ahead and seeing whether you can push and pull from GitHub successfully. If you’re going the HTTPS route due to issues, no worries! Just make sure your switch out the SSH clone URL for the HTTPS clone URL. This is something we’ll do during the workshop as well, but trying it out beforehand reduces chances of errors while the course is ongoing. The sequence of steps is as follows: Create a test repository on GitHub. Clone the test repository. Make local changes. Push the local changes to GitHub. This is where the magic happens (or not)! If all went well, you can refresh the webpage with your GitHub repository and you’ll see your local changes. Make changes online. Pull the online changes to your computer, so your local repository is up to date. If all went well, then your online changes are available locally as well. It also means you’re fully set up with Git &amp; GitHub! Create a test repository on GitHub Log into GitHub. Click the green New (repository) button. You can name your repository as testrepo. Make sure it’s a Public repository. Click YES, when asked if you want to initialize the repository with a README. Click the green Create repository button. Copy the SSH URL for cloning via the green Clone or Download button. Clone the test repository Go to your terminal and type the following command, substituting the SSH clone URL you copied in the previous step after git clone: git clone git@github.com:username/testrepo.git This should create a local copy of your repository as a folder with files contained within. Make local changes Navigate to the folder of your repository and open the README file. Make an edit, such as This is a line I’m adding offline to my local copy. Save the file and close it. Push the local changes to GitHub Go to your terminal and type the following command(s): git add . This adds all changed files to a ‘staging area’. git commit -m &quot;insert-understandable-message-here&quot; Now you’re officially ‘committing’ the changes you made. You want to add a understandable commit message so you have a clear record of your changes. git push With this command, you push the local changes and commit message to your repository online. This is where errors can pop up if the SSH set-up didn’t go as smoothly as expected. Troubleshoot the error messages the best you can! If everything went smoothly, you can refresh the webpage with GitHub repository and you should see that your changes have been synced. Make changes online Now we want to go the other way around, open your README file on GitHub and make an edit online. You can do this by: Clicking on the README file and the pencil icon to open edit mode. Add a sentence to your README like This is a line I’m adding from GitHub.com. When saving, you’ll have to provide a meaningful commit message again. Pull from GitHub Now go to your terminal and type the following command: git pull If all goes well, you’ll see some activity in the terminal which suggests the changes are being downloaded. You can then check out your README file and see whether your online change has been synced. Wrap-Up Did it work? You did it! You pushed and pulled from GitHub successfully, woohoo! "],["intro.html", "Introduction to WORCS", " Introduction to WORCS "],["phase-1.html", "Phase 1: Study Design", " Phase 1: Study Design Notes for cautious researchers Some researchers might want to share their work only once the paper is accepted for publication. In this case, we recommend creating a “Private” repository in Step 1, and completing Steps 13-18 in Phase 3 upon acceptance by the journal. Create a new remote repository on a ‘Git’ hosting service, such as “GitHub” For inexperienced users, we recommend making this repository “Private”, which means only you and selected co-authors can access it. You can set it to “Public” later - for example, when the paper goes to print - and the entire history of the Repository will be public record. We recommend making the repository “Public” from the start only if you are an experienced user and know what you are doing. Copy the repository’s SSH link to clipboard; this link should look something like git@github.com:username/repository.git In Rstudio, click File &gt; New Project &gt; New directory &gt; WORCS Project Template Paste the remote Repository address in the textbox. This address should look like git@github.com:username/repository.git Keep the checkbox for renv checked if you want to use dependency management (recommended) Select a preregistration template, or add a preregistration later using add_preregistration() Select a manuscript template, or add a manuscript later using add_manuscript() Select a license for your project (we recommend a CC-BY license, which allows free use of the licensed material as long as the creator is credited) A template README.md file will be automatically generated during project creation. Edit this template to explain how users should interact with the project. Based on your selections in the New Project dialog, a LICENSE will also be added to the project, to explain users’ rights and limit your liability. We recommend a CC-BY license, which allows free use of the licensed material as long as the creator is credited. Optional: Preregister your analysis by committing a plain-text preregistration and tag this commit with the label “preregistration”: Document study plans in a preregistration.Rmd file, and optionally, planned analyses in a .R file. In the top-right panel of ‘RStudio’, select the ‘Git’ tab Select the checkbox next to the preregistration file(s) Click the Commit button. In the pop-up window, write an informative “Commit message”, e.g., “Preregistration” Click the Commit button below the message dialog Click the green arrow labeled “Push” to send your commit to the ‘Git’ remote repository Tag this commit as a release on the remote repository, using the label “preregistration”. A tagged release helps others retrieve this commit. Instructions for ‘GitHub’ are explained here Optional: Render the preregistration to PDF, and upload it as an attachment to a dedicated preregistration server like AsPredicted.org or OSF.io In ‘RStudio’, with the file ‘preregistration.Rmd’ open, click the “Knit” button above the top left panel When the PDF is generated, go to one of the recognized preregistration services’ websites, create a new preregistration, and upload it as an attachment. Optional: Generate a DOI for the preregistration through the OSF or a service like Zenodo Optional: Add study materials to the repository. Only do this for study materials to which you own the rights, or when the materials’ license allows it You can solicit feedback and outside contributions on a ‘Git’ remote repository by opening an “Issue” or by accepting “Pull requests” "],["phase-2.html", "Phase 2: Writing &amp; Analysis", " Phase 2: Writing &amp; Analysis Create an executable script documenting the code required to load the raw data into a tabular format, and de-identify human subjects if applicable Document this preprocessing (“data wrangling”) procedure in the prepare_data.R file. This file is intended to document steps that can not or should not be replicated by end users, unless they have access to the raw data file. These are steps you would run only once, the first time you load data into R. Make this file as short as possible; only include steps that are absolutely necessary Save the data using open_data() or closed_data() WARNING: Once you commit a data file to the ‘Git’ repository, its record will be retained forever (unless the entire repository is deleted). Assume that pushing data to a ‘Git’ remote repository cannot be undone. Follow the mantra: “Never commit something you do not intend to share”. When using external data sources (e.g., obtained using an API), it is recommended to store a local copy, to make the project portable and to ensure that end users have access to the same version of the data you used. Write the manuscript in Manuscript.Rmd Use code chunks to perform the analyses. The first code chunk should call load_data() Finish each sentence with one carriage return (enter); separate paragraphs with a double carriage return. Regularly Commit your progress to the Git repository; ideally, after completing each small and clearly defined task. In the top-right panel of ‘RStudio’, select the ‘Git’ tab Select the checkboxes next to all files whose changes you wish to Commit Click the Commit button. In the pop-up window, write an informative “Commit message”. Click the Commit button below the message dialog Click the green arrow labeled “Push” to send your commit to the remote repository While writing, cite essential references with one at-symbol, [@essentialref2020], and non-essential references with a double at-symbol, [@@nonessential2020]. "],["phase-3.html", "Phase 3: Submission &amp; Publication", " Phase 3: Submission &amp; Publication Use dependency management to make the computational environment fully reproducible. When using renv, you can save the state of the project library (all packages used) by calling renv::snapshot(). This updates the lockfile, renv.lock. Optional: Add a WORCS-badge to your project’s README file and complete the optional elements of the WORCS checklist to qualify for a “Perfect” rating. Run the check_worcs() function to see whether your project adheres to the WORCS checklist (see worcs::checklist) This adds a WORCS-badge to your ‘README.md’ file, with a rank of “Fail”, “Limited”, or “Open”. Reference the WORCS checklist and your paper’s score in the paper. Optional: Complete the additional optional items in the WORCS checklist by hand, and get a “Perfect” rating. Make the ‘Git’ remote repository “Public” if it was set to “Private” Instructions for ‘GitHub’: Go to your project’s repository Click the “Settings” button Scroll to the bottom of the page; click “Make public”, and follow the on-screen instructions Create a project on the Open Science Framework (OSF) and connect it to the ‘Git’ remote repository. On the OSF project page, you can select a License for the project. This helps clearly communicate the terms of reusability of your project. Make sure to use the same License you selected during project creation in Step 3. Generate a Digital Object Identifier (DOI) for the OSF project A DOI is a persistent identifier that can be used to link to your project page. You may have already created a project page under Step 5 if you preregistered on the OSF Optionally, you can generate additional DOIs for specific resources like datasets. Alternatively, you can connect your ‘Git’ remote repository to Zenodo, instead of the OSF, to create DOIs for the project and specific resources. Add an open science statement to the Abstract or Author notes, which links to the ‘OSF’ project page and/or the ‘Git’ remote repository. Placing this statement in the Abstract or Author note means that readers can find your project even if the paper is published behind a paywall. The link can be masked for blind review. The open science statement should indicate which resources are available in the online repository; data, code, materials, study design details, a pre-registration, and/or comprehensive citations. For further guidance, see (aalbersbergMakingScienceTransparent2018?). Example: In the spirit of open science, an online repository is available at XXX, which contains [the data/a synthetic data file], analysis code, the research materials used, details about the study design, more comprehensive citations, and a tagged release with the preregistration. Knit the paper to PDF for submission In ‘RStudio’, with the file ‘manuscript.Rmd’ open, click the “Knit” button above the top left panel To retain essential citations only, change the front matter of the ‘manuscript.Rmd’ file: Change knit: worcs::cite_all to knit: worcs::cite_essential Optional: Publish preprint in a not-for-profit preprint repository such as PsyArchiv, and connect it to your existing OSF project Check Sherpa Romeo to be sure that your intended outlet allows the publication of preprints; many journals do, nowadays - and if they do not, it is worth considering other outlets. Submit the paper, and tag the commit of the submitted paper as a release, as in Step 4. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
